from django.db import models
from django.conf import settings
from django.contrib.auth import get_user_model

User = get_user_model()

class UserInteraction(models.Model):
    """
    Tracks user interactions for recommendation system
    """
    INTERACTION_TYPES = [
        ('view', 'View'),
        ('like', 'Like'),
        ('comment', 'Comment'),
        ('share', 'Share'),
        ('click', 'Click'),
        ('ai_usage', 'AI Usage'),
    ]
    
    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name='interactions')
    interaction_type = models.CharField(max_length=20, choices=INTERACTION_TYPES)
    content_id = models.CharField(max_length=100, help_text="ID of the content item")
    content_type = models.CharField(max_length=50, help_text="Type of content (post, article, etc.)")
    platform = models.CharField(max_length=20, blank=True, help_text="Platform where interaction occurred")
    metadata = models.JSONField(default=dict, blank=True)
    created_at = models.DateTimeField(auto_now_add=True)
    
    class Meta:
        ordering = ['-created_at']
        indexes = [
            models.Index(fields=['user', 'interaction_type']),
            models.Index(fields=['content_id', 'content_type']),
            models.Index(fields=['created_at']),
        ]
    
    def __str__(self):
        return f"{self.user.username} - {self.interaction_type} on {self.content_id}"

class Recommendation(models.Model):
    """
    Stores recommendations generated by the ML service
    """
    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name='recommendations')
    content_id = models.CharField(max_length=100)
    content_type = models.CharField(max_length=50)
    score = models.FloatField(help_text="Recommendation score")
    algorithm = models.CharField(max_length=20, help_text="Algorithm used (collaborative, content, hybrid)")
    is_clicked = models.BooleanField(default=False)
    is_dismissed = models.BooleanField(default=False)
    created_at = models.DateTimeField(auto_now_add=True)
    
    class Meta:
        ordering = ['-score', '-created_at']
        indexes = [
            models.Index(fields=['user', 'algorithm']),
            models.Index(fields=['content_id', 'content_type']),
        ]
    
    def __str__(self):
        return f"Recommendation for {self.user.username}: {self.content_id} (score: {self.score})"

class ChurnPrediction(models.Model):
    """
    Stores churn predictions for users
    """
    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name='churn_predictions')
    churn_risk = models.FloatField(help_text="Churn risk score (0-1)")
    features = models.JSONField(default=dict, help_text="Features used for prediction")
    prediction_date = models.DateTimeField(auto_now_add=True)
    
    class Meta:
        ordering = ['-prediction_date']
    
    def __str__(self):
        return f"Churn prediction for {self.user.username}: {self.churn_risk:.3f}" 